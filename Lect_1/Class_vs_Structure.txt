SystemVerilog structs are strictly static objects; they are created either in a static memory location (global or module scope)
or on the stack of an automatic task. 
Conversely, SystemVerilog objects (i.e., class instances) are exclusively dynamic; 
their declaration does not create the object. Creating an object is done by calling new.

SystemVerilog objects are implemented using handles, thereby providing C-like pointer functionality. 
But, SystemVerilog disallows casting handles onto other data types; thus, unlike C, 
SystemVerilog handles are guaranteed to be safe.

SystemVerilog objects form the basis of an Object-Oriented data abstraction that provides true polymorphism. 
Class inheritance, abstract classes, and dynamic casting are powerful mechanisms that go way beyond 
the mere encapsulation mechanism provided by structs.
